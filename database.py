"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite —Å SQLAlchemy
"""

from sqlalchemy import create_engine, Column, String, Integer, DateTime, Text, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime
import os

# URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./retroboard.db")

# –°–æ–∑–¥–∞–Ω–∏–µ engine
engine = create_engine(
    DATABASE_URL, 
    connect_args={"check_same_thread": False}  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è SQLite
)

# –°–æ–∑–¥–∞–Ω–∏–µ session maker
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()


class Board(Base):
    """–ú–æ–¥–µ–ª—å —Ä–µ—Ç—Ä–æ–±–æ—Ä–¥—ã"""
    __tablename__ = "boards"
    
    id = Column(String, primary_key=True, index=True)
    name = Column(String, nullable=False)
    description = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # –°–≤—è–∑—å —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
    notes = relationship("Note", back_populates="board", cascade="all, delete-orphan")


class Note(Base):
    """–ú–æ–¥–µ–ª—å –∑–∞–º–µ—Ç–∫–∏"""
    __tablename__ = "notes"
    
    id = Column(String, primary_key=True, index=True)
    text = Column(Text, nullable=False)
    category = Column(String, nullable=False)  # good, bad, improve
    author = Column(String, default="Anonymous")
    votes = Column(Integer, default=0)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # –°–≤—è–∑—å —Å –¥–æ—Å–∫–æ–π
    board_id = Column(String, ForeignKey("boards.id"), nullable=False)
    board = relationship("Board", back_populates="notes")


def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")


def create_demo_data():
    """–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ"""
    from uuid import uuid4
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        existing_boards = db.query(Board).count()
        if existing_boards > 0:
            print("üìã –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            return
        
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–¥–æ—Å–∫—É
        demo_board = Board(
            id=str(uuid4()),
            name="–î–µ–º–æ —Ä–µ—Ç—Ä–æ–±–æ—Ä–¥",
            description="–ü—Ä–∏–º–µ—Ä –¥–æ—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
        db.add(demo_board)
        db.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
        
        # –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∑–∞–º–µ—Ç–∫–∏
        demo_notes = [
            Note(
                id=str(uuid4()),
                text="–û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ",
                category="good",
                author="–ê–ª–µ–∫—Å–µ–π",
                board_id=demo_board.id
            ),
            Note(
                id=str(uuid4()),
                text="–î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –±–∞–≥–æ–≤",
                category="bad",
                author="–ú–∞—Ä–∏—è",
                votes=1,
                board_id=demo_board.id
            ),
            Note(
                id=str(uuid4()),
                text="–í–Ω–µ–¥—Ä–∏—Ç—å code review –ø—Ä–æ—Ü–µ—Å—Å",
                category="improve",
                author="–°–µ—Ä–≥–µ–π",
                board_id=demo_board.id
            ),
            Note(
                id=str(uuid4()),
                text="–•–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∏—Ç–∏–Ω–≥–∏",
                category="good",
                author="–ê–Ω–Ω–∞",
                votes=2,
                board_id=demo_board.id
            ),
            Note(
                id=str(uuid4()),
                text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD pipeline",
                category="improve",
                author="–ò–≥–æ—Ä—å",
                votes=1,
                board_id=demo_board.id
            )
        ]
        
        for note in demo_notes:
            db.add(note)
        
        db.commit()
        print("‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        raise
    finally:
        db.close()

