// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentBoard = null;
let boards = [];
let currentUser = null;

// –£—Ç–∏–ª–∏—Ç—ã
function isSubmitShortcut(event) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ Ctrl+Enter (Windows/Linux) –∏–ª–∏ Cmd+Enter (Mac)
    return event.key === 'Enter' && (event.ctrlKey || event.metaKey);
}

function autoResizeTextarea(textarea) {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã textarea
    if (!textarea) return;
    
    // –°–±—Ä–æ—Å–∏—Ç—å –≤—ã—Å–æ—Ç—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    textarea.style.height = 'auto';
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—Å–æ—Ç—É —Ä–∞–≤–Ω—É—é scrollHeight
    textarea.style.height = Math.max(40, textarea.scrollHeight) + 'px';
}

function setupAutoResize(textarea) {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è textarea
    if (!textarea) return;
    
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è textarea');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
    textarea.style.minHeight = '40px';
    textarea.style.maxHeight = '200px';
    textarea.style.resize = 'none';
    textarea.style.overflowY = 'hidden';
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º padding –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (!textarea.style.padding || textarea.style.padding === '8px') {
        textarea.style.padding = '12px 25px 20px 15px';
    }
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    autoResizeTextarea(textarea);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    textarea.addEventListener('input', function() {
        autoResizeTextarea(this);
    });
    
    textarea.addEventListener('paste', function() {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        setTimeout(() => autoResizeTextarea(this), 10);
    });
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è value)
    textarea.addEventListener('focus', function() {
        autoResizeTextarea(this);
    });
}

function showError(message) {
    const errorContainer = document.getElementById('errorContainer');
    errorContainer.style.display = 'block';
    errorContainer.innerHTML = `<div class="error">${message}</div>`;
    setTimeout(() => {
        errorContainer.innerHTML = '';
        errorContainer.style.display = 'none';
    }, 10000);
}

function formatDate(isoString) {
    const date = new Date(isoString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function getCurrentUser() {
    if (!currentUser) {
        const stored = localStorage.getItem('retroboard_user');
        if (stored) {
            try {
                currentUser = JSON.parse(stored);
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
                currentUser = null;
            }
        }
    }
    return currentUser;
}

function updateUserDisplay() {
    const user = getCurrentUser();
    const userName = document.getElementById('userName');
    const userAvatar = document.getElementById('userAvatar');
    
    if (user && user.name) {
        userName.textContent = user.name;
        userAvatar.textContent = user.name.charAt(0).toUpperCase();
    } else {
        userName.textContent = '–ì–æ—Å—Ç—å';
        userAvatar.textContent = '–ì';
    }
}

function showLoginModal() {
    console.log('üëã –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞');
    const modal = document.getElementById('loginModal');
    const input = document.getElementById('loginName');
    
    modal.classList.add('show');
    setTimeout(() => input.focus(), 300); // –§–æ–∫—É—Å –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
    input.onkeydown = (e) => {
        if (e.key === 'Enter' || isSubmitShortcut(e)) {
            e.preventDefault();
            saveUserName();
        }
    };
}

function showProfileModal() {
    console.log('üë§ –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è');
    const modal = document.getElementById('profileModal');
    const input = document.getElementById('profileName');
    const user = getCurrentUser();
    
    input.value = user ? user.name || '' : '';
    modal.classList.add('show');
    setTimeout(() => input.focus(), 300);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à  
    input.onkeydown = (e) => {
        if (e.key === 'Enter' || isSubmitShortcut(e)) {
            e.preventDefault();
            updateProfile();
        }
    };
}

function hideProfileModal() {
    console.log('‚ùå –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è');
    const modal = document.getElementById('profileModal');
    modal.classList.remove('show');
}

function saveUserName() {
    const nameInput = document.getElementById('loginName');
    const name = nameInput.value.trim();
    
    if (!name) {
        nameInput.focus();
        return;
    }
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', name);
    
    currentUser = {
        name: name,
        createdAt: new Date().toISOString()
    };
    
    localStorage.setItem('retroboard_user', JSON.stringify(currentUser));
    updateUserDisplay();
    
    const modal = document.getElementById('loginModal');
    modal.classList.remove('show');
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', currentUser.name);
}

function updateProfile() {
    const nameInput = document.getElementById('profileName');
    const name = nameInput.value.trim();
    
    if (!name) {
        nameInput.focus();
        return;
    }
    
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:', name);
    
    currentUser = {
        name: name,
        createdAt: currentUser ? currentUser.createdAt : new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    
    localStorage.setItem('retroboard_user', JSON.stringify(currentUser));
    updateUserDisplay();
    hideProfileModal();
    
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', currentUser.name);
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
async function deleteNote(noteId) {
    if (!currentBoard) {
        showError('–î–æ—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return;
    }
    
    // –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    const note = currentBoard.notes.find(n => n.id === noteId);
    if (!note) {
        showError('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    const notePreview = note.text.length > 50 ? note.text.substring(0, 50) + '...' : note.text;
    
    
    try {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:', noteId);
        
        const response = await fetch(`/api/boards/${currentBoard.id}/notes/${noteId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        console.log('Delete API response status:', response.status);
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.detail || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
        }
        
        const result = await response.json();
        console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞:', result);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await loadBoard(currentBoard.id);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ' + error.message);
    }
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function fetchBoards() {
    try {
        const response = await fetch('/api/boards');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        boards = await response.json();
        renderBoardTabs();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å–æ–∫:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å–æ–∫: ' + error.message);
    }
}

async function createBoard() {
    const name = document.getElementById('newBoardName').value.trim();
    const description = document.getElementById('newBoardDesc').value.trim();
    
    if (!name) {
        showError('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
        return;
    }
    
    try {
        const response = await fetch('/api/boards', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name, description })
        });
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏');
        }
        
        const newBoard = await response.json();
        boards.push({
            id: newBoard.id,
            name: newBoard.name,
            description: newBoard.description,
            created_at: newBoard.created_at
        });
        
        // –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏
        cancelCreateBoardForm();
        
        renderBoardTabs();
        await loadBoard(newBoard.id);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏: ' + error.message);
    }
}

async function loadBoard(boardId) {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–∫–∏:', boardId);
        
        if (!boardId) {
            throw new Error('Board ID is required');
        }
        
        const response = await fetch(`/api/boards/${boardId}`);
        console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç API:', response.status, response.statusText);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–∫–∏:', response.status, errorText);
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const boardData = await response.json();
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏:', {
            id: boardData.id,
            name: boardData.name,
            notesCount: boardData.notes ? boardData.notes.length : 'undefined'
        });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!boardData.id || !boardData.name) {
            throw new Error('Invalid board data: missing id or name');
        }
        
        if (!boardData.notes || !Array.isArray(boardData.notes)) {
            console.warn('‚ö†Ô∏è Notes array is missing or invalid, setting empty array');
            boardData.notes = [];
        }
        
        currentBoard = boardData;
        console.log('‚úÖ –î–æ—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', currentBoard.name, 'ID:', currentBoard.id, '–ó–∞–º–µ—Ç–æ–∫:', currentBoard.notes.length);
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ—Å–∫—É –≤ localStorage
        localStorage.setItem('selectedBoardId', currentBoard.id);

        // –í—ã–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
        selectBoardTab(currentBoard.id);

        console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å–∫–∏...');
        renderBoard();
        console.log('‚úÖ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å–∫–∏: ' + error.message);
        
        // –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–∑ localStorage
        localStorage.removeItem('selectedBoardId');
        
        // –ü–æ–∫–∞–∑–∞—Ç—å placeholder –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ—Å–∫—É
        showBoardPlaceholder();
    }
}

function showBoardPlaceholder() {
    console.log('üìã –ü–æ–∫–∞–∑ placeholder (–¥–æ—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞)');
    const placeholder = document.getElementById('boardPlaceholder');
    const boardInfo = document.getElementById('boardInfo');
    const boardColumns = document.getElementById('boardColumns');
    
    if (placeholder) placeholder.style.display = 'block';
    if (boardInfo) boardInfo.style.display = 'none';
    if (boardColumns) boardColumns.style.display = 'none';
}

function showBoardContent() {
    console.log('üìã –ü–æ–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ—Å–∫–∏');
    const placeholder = document.getElementById('boardPlaceholder');
    const boardInfo = document.getElementById('boardInfo');
    const boardColumns = document.getElementById('boardColumns');
    
    if (placeholder) placeholder.style.display = 'none';
    if (boardInfo) boardInfo.style.display = 'block';
    if (boardColumns) boardColumns.style.display = 'grid';
}

async function addInlineNote(category) {
    if (!currentBoard) {
        showError('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å–∫—É');
        return;
    }
    
    const text = document.getElementById(`${category}NoteText`).value.trim();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
    const user = getCurrentUser();
    let author = document.getElementById(`${category}NoteAuthor`).value.trim();
    if (!author && user && user.name) {
        author = user.name;
    } else if (!author) {
        author = 'Anonymous';
    }
    
    if (!text) {
        showError('–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        return;
    }
    
    try {
        const response = await fetch(`/api/boards/${currentBoard.id}/notes`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ text, category, author })
        });
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
        }
        
        // –°–∫—Ä—ã—Ç—å –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        cancelNoteForm(category);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å–∫—É
        await loadBoard(currentBoard.id);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ' + error.message);
    }
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)
async function addNote() {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
}

async function voteNote(noteId) {
    if (!currentBoard) return;
    
    try {
        const response = await fetch(`/api/boards/${currentBoard.id}/notes/${noteId}/vote`, {
            method: 'POST'
        });
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || '–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å–∫—É
        await loadBoard(currentBoard.id);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
        showError('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ' + error.message);
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
function renderBoardTabs() {
    const boardTabs = document.getElementById('boardTabs');
    if (!boardTabs) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç boardTabs –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (boards.length === 0) {
        boardTabs.innerHTML = '<div style="color: #6c757d; font-size: 14px;">–ù–µ—Ç –¥–æ—Å–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.</div>';
        return;
    }
    
    boardTabs.innerHTML = boards.map(board => `
        <div class="board-tab" onclick="loadBoard('${board.id}')" data-board-id="${board.id}" title="${board.description || board.name}">
            ${board.name}
        </div>
    `).join('');
    
    console.log('üìã –¢–∞–±—ã –¥–æ—Å–æ–∫ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ã:', boards.length);
}

function selectBoardTab(boardId) {
    // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
    document.querySelectorAll('.board-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
    const selectedTab = document.querySelector(`[data-board-id="${boardId}"]`);
    if (selectedTab) {
        selectedTab.classList.add('active');
    }
}

function renderBoardList() {
    // –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω —Å —Ç–∞–±–∞–º–∏
    renderBoardTabs();
}

function selectBoard(boardId) {
    console.log('üéØ –í—ã–±–æ—Ä –¥–æ—Å–∫–∏ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ loadBoard):', boardId);
    loadBoard(boardId);
}

function renderBoard() {
    console.log('üé® renderBoard() –≤—ã–∑–≤–∞–Ω–∞, currentBoard:', currentBoard);
    
    if (!currentBoard) {
        console.error('‚ùå currentBoard is null/undefined');
        showBoardPlaceholder();
        return;
    }
    
    if (!currentBoard.notes) {
        console.error('‚ùå currentBoard.notes is missing');
        currentBoard.notes = [];
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å–∫–µ, —Å–∫—Ä—ã—Ç—å placeholder
    showBoardContent();
    
    console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å–∫–∏:', currentBoard.name, '–∑–∞–º–µ—Ç–æ–∫:', currentBoard.notes.length);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const boardTitle = document.getElementById('boardTitle');
    const boardDescription = document.getElementById('boardDescription');
    
    if (!boardTitle) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç boardTitle –Ω–µ –Ω–∞–π–¥–µ–Ω');
        throw new Error('DOM element boardTitle not found');
    }
    if (!boardDescription) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç boardDescription –Ω–µ –Ω–∞–π–¥–µ–Ω');
        throw new Error('DOM element boardDescription not found');
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ—Å–∫–∏...');
    boardTitle.textContent = currentBoard.name;
    boardDescription.textContent = currentBoard.description || '';
    
    // –í –Ω–æ–≤–æ–º –¥–∏–∑–∞–π–Ω–µ –¥–æ—Å–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞, –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª–∞—Å—Å 'active'
    
    // –†–µ–Ω–¥–µ—Ä–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = {
        good: document.getElementById('goodNotes'),
        bad: document.getElementById('badNotes'),
        improve: document.getElementById('improveNotes')
    };
    
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
    Object.values(categories).forEach(container => {
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å drop-zone
        const dropZone = container.querySelector('.drop-zone');
        container.innerHTML = '';
        if (dropZone) {
            container.appendChild(dropZone);
        }
    });
    
    // –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const notesByCategory = {
        good: [],
        bad: [],
        improve: []
    };
    
    currentBoard.notes.forEach(note => {
        if (notesByCategory[note.category]) {
            notesByCategory[note.category].push(note);
        }
    });
    
    // –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤ (—É–±—ã–≤–∞–Ω–∏–µ)
    Object.values(notesByCategory).forEach(notes => {
        notes.sort((a, b) => b.votes - a.votes);
    });
    
    // –†–µ–Ω–¥–µ—Ä–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    Object.keys(notesByCategory).forEach(category => {
        const container = categories[category];
        const notes = notesByCategory[category];
        
        if (notes.length === 0) {
            const emptyDiv = document.createElement('div');
            emptyDiv.style.textAlign = 'center';
            emptyDiv.style.color = '#999';
            emptyDiv.style.padding = '20px';
            emptyDiv.textContent = '–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç';
            container.appendChild(emptyDiv);
            return;
        }
        
        notes.forEach(note => {
            const noteDiv = document.createElement('div');
            noteDiv.className = 'note';
            noteDiv.draggable = true;
            noteDiv.dataset.noteId = note.id;
            noteDiv.dataset.category = note.category;
            noteDiv.dataset.createdAt = note.created_at;
            
            noteDiv.innerHTML = `
                <div class="note-text">${note.text}</div>
                <div class="note-meta">
                    <span>${note.author} ‚Ä¢ ${formatDate(note.created_at)}</span>
                    <div class="note-actions">
                        <button class="edit-btn" onclick="editNote('${note.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            ‚úèÔ∏è
                        </button>
                        <button class="vote-btn" onclick="voteNote('${note.id}')">
                            üëç ${note.votes}
                        </button>
                    </div>
                </div>
            `;
            
            container.appendChild(noteDiv);
        });
    });
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π
    renderBoardList();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å drag-and-drop –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    setTimeout(() => {
        initializeDragAndDrop();
    }, 100);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = getCurrentUser();
    if (!user || !user.name) {
        console.log('üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑ –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞');
        showLoginModal();
    } else {
        console.log('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,', user.name);
        updateUserDisplay();
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    fetchBoards();
    
    // –ü–æ–∫–∞–∑–∞—Ç—å placeholder –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–æ—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞)
    showBoardPlaceholder();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—á–µ—Ç–∞–Ω–∏–π –∫–ª–∞–≤–∏—à –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏
    const boardNameInput = document.getElementById('newBoardName');
    const boardDescInput = document.getElementById('newBoardDesc');
    
    [boardNameInput, boardDescInput].forEach(input => {
        input.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || isSubmitShortcut(e)) {
                e.preventDefault();
                createBoard();
            }
        });
    });
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline —Ñ–æ—Ä–º
    addInlineFormHandlers();
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            // –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –∞–∫—Ç–∏–≤–Ω—ã
            const editingNotes = document.querySelectorAll('.note[data-editing="true"]');
            if (editingNotes.length > 0) {
                e.preventDefault();
                console.log('‚å®Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ Escape');
                cancelAllEditing();
                return;
            }
            
            // –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
            const createBoardForm = document.getElementById('createBoardForm');
            if (createBoardForm && createBoardForm.classList.contains('show')) {
                e.preventDefault();
                console.log('‚å®Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏ —á–µ—Ä–µ–∑ Escape');
                cancelCreateBoardForm();
                return;
            }
            
            // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
            const profileModal = document.getElementById('profileModal');
            if (profileModal && profileModal.style.display === 'flex') {
                e.preventDefault();
                console.log('‚å®Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ Escape');
                hideProfileModal();
                return;
            }
        }
    });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function(e) {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–º–µ—Ç–∫–∏
        const editingNotes = document.querySelectorAll('.note[data-editing="true"]');
        editingNotes.forEach(noteElement => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –≤–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–º–µ—Ç–∫–∏
            if (!noteElement.contains(e.target)) {
                const noteId = noteElement.dataset.noteId;
                const note = currentBoard?.notes?.find(n => n.id === noteId);
                if (note) {
                    console.log(`üñ±Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ ${noteId} –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∑–∞–º–µ—Ç–∫–∏`);
                    cancelInlineEdit(noteId, note.text, note.author);
                }
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë
        const createBoardForm = document.getElementById('createBoardForm');
        const createBoardSection = document.querySelector('.create-board-section');
        
        if (createBoardForm && createBoardForm.classList.contains('show')) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –≤–Ω–µ —Å–µ–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏
            if (!createBoardSection.contains(e.target)) {
                console.log('üñ±Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ —Ñ–æ—Ä–º—ã');
                cancelCreateBoardForm();
            }
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
        const categories = ['good', 'bad', 'improve'];
        categories.forEach(category => {
            const noteForm = document.getElementById(`${category}NoteForm`);
            const column = noteForm?.closest('.column');
            
            if (noteForm && noteForm.classList.contains('show')) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –≤–Ω–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —Ñ–æ—Ä–º–æ–π
                if (!column || !column.contains(e.target)) {
                    console.log(`üñ±Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ ${category} –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ —Ñ–æ—Ä–º—ã`);
                    cancelNoteForm(category);
                }
            }
        });
    });
    
    console.log('–†–µ—Ç—Ä–æ–±–æ—Ä–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
});

function addInlineFormHandlers() {
    const categories = ['good', 'bad', 'improve'];
    
    categories.forEach(category => {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—á–µ—Ç–∞–Ω–∏–π –∫–ª–∞–≤–∏—à –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
        const textarea = document.getElementById(`${category}NoteText`);
        const authorInput = document.getElementById(`${category}NoteAuthor`);
        
        [textarea, authorInput].forEach(element => {
            if (element) {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è textarea
                if (element.tagName === 'TEXTAREA') {
                    setupAutoResize(element);
                }
                
                element.addEventListener('keydown', function(e) {
                    if (isSubmitShortcut(e)) {
                        e.preventDefault();
                        console.log(`‚å®Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ ${e.ctrlKey ? 'Ctrl' : 'Cmd'}+Enter –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);
                        addInlineNote(category);
                    } else if (e.key === 'Escape') {
                        e.preventDefault();
                        console.log(`‚å®Ô∏è –û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ Escape –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);
                        cancelNoteForm(category);
                    }
                });
            }
        });
    });
}

// Drag and Drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
let draggedElement = null;

function initializeDragAndDrop() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag-and-drop...');
    
    // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–Ω–∞—á–∞–ª–∞
    const oldNotes = document.querySelectorAll('.note[draggable="true"]');
    oldNotes.forEach(note => {
        note.removeEventListener('dragstart', handleDragStart);
        note.removeEventListener('dragend', handleDragEnd);
        // –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è merge
        note.removeEventListener('dragover', handleNoteDragOver);
        note.removeEventListener('dragenter', handleNoteDragEnter);
        note.removeEventListener('dragleave', handleNoteDragLeave);
        note.removeEventListener('drop', handleNoteDrop);
    });
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag-and-drop –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
    const notes = document.querySelectorAll('.note[draggable="true"]');
    console.log('–ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è drag-and-drop:', notes.length);
    
    notes.forEach((note, index) => {
        console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–º–µ—Ç–∫–∏ ${index}:`, note.dataset.noteId, note.dataset.category);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        note.addEventListener('dragstart', handleDragStart);
        note.addEventListener('dragend', handleDragEnd);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è merge (–∑–∞–º–µ—Ç–∫–∞ –∫–∞–∫ —Ü–µ–ª—å)
        note.addEventListener('dragover', handleNoteDragOver);
        note.addEventListener('dragenter', handleNoteDragEnter);
        note.addEventListener('dragleave', handleNoteDragLeave);
        note.addEventListener('drop', handleNoteDrop);
    });
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    const columns = document.querySelectorAll('.column');
    console.log('–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫:', columns.length);
    
    columns.forEach(column => {
        // –£–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        column.removeEventListener('dragover', handleDragOver);
        column.removeEventListener('dragenter', handleDragEnter);
        column.removeEventListener('dragleave', handleDragLeave);
        column.removeEventListener('drop', handleDrop);
        
        // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ
        column.addEventListener('dragover', handleDragOver);
        column.addEventListener('dragenter', handleDragEnter);
        column.addEventListener('dragleave', handleDragLeave);
        column.addEventListener('drop', handleDrop);
        
        console.log('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞:', column.dataset.category);
    });
}

function handleDragStart(e) {
    draggedElement = this;
    this.classList.add('dragging');
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', this.outerHTML);
    e.dataTransfer.setData('note-id', this.dataset.noteId);
    e.dataTransfer.setData('source-category', this.dataset.category);
}

function handleDragEnd(e) {
    this.classList.remove('dragging');
    draggedElement = null;
    
    // –£–±—Ä–∞—Ç—å –≤—Å–µ visual feedback
    document.querySelectorAll('.column').forEach(col => {
        col.classList.remove('drag-over');
    });
    
    // –£–±—Ä–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É merge —Å–æ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
    document.querySelectorAll('.note.merge-target').forEach(note => {
        note.classList.remove('merge-target');
    });
    
    console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è - –≤—Å–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã');
}

function handleDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
}

function handleDragEnter(e) {
    e.preventDefault();
    if (draggedElement && !this.classList.contains('drag-over')) {
        this.classList.add('drag-over');
    }
}

function handleDragLeave(e) {
    // –£–±—Ä–∞—Ç—å highlight —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã—à–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∞ –∫–æ–ª–æ–Ω–∫—É
    if (!this.contains(e.relatedTarget)) {
        this.classList.remove('drag-over');
    }
}

async function handleDrop(e) {
    e.preventDefault();
    this.classList.remove('drag-over');
    
    if (!draggedElement) {
        console.log('No dragged element');
        return;
    }
    
    const noteId = e.dataTransfer.getData('note-id');
    const sourceCategory = e.dataTransfer.getData('source-category');
    const targetCategory = this.dataset.category;
    
    console.log('Drop –≤ –∫–æ–ª–æ–Ω–∫—É:', { noteId, sourceCategory, targetCategory });
    
    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (sourceCategory === targetCategory) {
        console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å');
        return;
    }
    
    try {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–º–µ—Ç–∫–∏...');
        await updateNoteCategory(noteId, targetCategory);
        console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await loadBoard(currentBoard.id);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: ' + error.message);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è merge –∑–∞–º–µ—Ç–æ–∫
function handleNoteDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
    e.dataTransfer.dropEffect = 'copy';
}

function handleNoteDragEnter(e) {
    e.preventDefault();
    e.stopPropagation();
    
    if (draggedElement && draggedElement !== this) {
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–æ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π
        document.querySelectorAll('.note.merge-target').forEach(note => {
            if (note !== this) {
                note.classList.remove('merge-target');
            }
        });
        
        console.log('üîó –ó–∞–º–µ—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ merge:', this.dataset.noteId);
        this.classList.add('merge-target');
    }
}

function handleNoteDragLeave(e) {
    e.preventDefault();
    e.stopPropagation();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const targetElement = this;
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –º—ã—à–∏
    setTimeout(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –≤—Å–µ –µ—â–µ –Ω–∞–¥ –∑–∞–º–µ—Ç–∫–æ–π
        const rect = targetElement.getBoundingClientRect();
        const mouseX = e.clientX;
        const mouseY = e.clientY;
        
        // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∏–Ω—É–ª –≥—Ä–∞–Ω–∏—Ü—ã –∑–∞–º–µ—Ç–∫–∏, —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        if (mouseX < rect.left || mouseX > rect.right || 
            mouseY < rect.top || mouseY > rect.bottom) {
            targetElement.classList.remove('merge-target');
            console.log('üîó –£–±—Ä–∞–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ merge –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:', targetElement.dataset.noteId);
        }
    }, 10);
}

async function handleNoteDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    this.classList.remove('merge-target');
    
    if (!draggedElement || draggedElement === this) {
        console.log('–ù–µ–ª—å–∑—è —Å–∫–ª–µ–∏—Ç—å –∑–∞–º–µ—Ç–∫—É —Å–∞–º—É —Å —Å–æ–±–æ–π');
        return;
    }
    
    const sourceNoteId = e.dataTransfer.getData('note-id');
    const targetNoteId = this.dataset.noteId;
    
    console.log('üîó Merge –∑–∞–º–µ—Ç–æ–∫:', { source: sourceNoteId, target: targetNoteId });
    
    try {
        await mergeNotes(sourceNoteId, targetNoteId);
        console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã');
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await loadBoard(currentBoard.id);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫: ' + error.message);
    }
}

async function updateNoteCategory(noteId, newCategory) {
    if (!currentBoard) {
        throw new Error('–î–æ—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
    }
    
    console.log('üîç Current Board Info:', {
        boardId: currentBoard.id,
        boardName: currentBoard.name,
        notesCount: currentBoard.notes.length
    });
    
    console.log('API –∑–∞–ø—Ä–æ—Å:', {
        url: `/api/boards/${currentBoard.id}/notes/${noteId}/category`,
        method: 'PUT',
        body: { category: newCategory }
    });
    
    const response = await fetch(`/api/boards/${currentBoard.id}/notes/${noteId}/category`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ category: newCategory })
    });
    
    console.log('API response status:', response.status);
    
    if (!response.ok) {
        let errorMessage = '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        try {
            const error = await response.json();
            errorMessage = error.error || error.detail || errorMessage;
        } catch (e) {
            const text = await response.text();
            errorMessage = text || errorMessage;
        }
        console.error('‚ùå API error:', errorMessage);
        console.error('‚ùå Board ID –≤ –∑–∞–ø—Ä–æ—Å–µ:', currentBoard.id);
        
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        try {
            const boardsResponse = await fetch('/api/boards');
            const boards = await boardsResponse.json();
            console.error('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å–∫–∏:', boards.map(b => ({name: b.name, id: b.id})));
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫');
        }
        
        throw new Error(errorMessage);
    }
    
    const result = await response.json();
    console.log('‚úÖ API response:', result);
    return result;
}

async function mergeNotes(sourceNoteId, targetNoteId) {
    if (!currentBoard) {
        throw new Error('–î–æ—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
    }
    
    console.log('üîó API –∑–∞–ø—Ä–æ—Å merge:', {
        url: `/api/boards/${currentBoard.id}/notes/${targetNoteId}/merge`,
        method: 'PUT',
        body: { sourceNoteId: sourceNoteId }
    });
    
    const response = await fetch(`/api/boards/${currentBoard.id}/notes/${targetNoteId}/merge`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ sourceNoteId: sourceNoteId })
    });
    
    console.log('Merge API response status:', response.status);
    
    if (!response.ok) {
        let errorMessage = '–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫';
        try {
            const error = await response.json();
            errorMessage = error.error || error.detail || errorMessage;
        } catch (e) {
            const text = await response.text();
            errorMessage = text || errorMessage;
        }
        console.error('‚ùå Merge API error:', errorMessage);
        throw new Error(errorMessage);
    }
    
    const result = await response.json();
    console.log('‚úÖ Merge API response:', result);
    return result;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏
function toggleCreateBoardForm() {
    const form = document.getElementById('createBoardForm');
    const button = form.previousElementSibling;
    
    if (form.classList.contains('show')) {
        form.classList.remove('show');
        button.classList.remove('active');
    } else {
        form.classList.add('show');
        button.classList.add('active');
        
        // –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        const nameInput = document.getElementById('newBoardName');
        if (nameInput) {
            nameInput.focus();
        }
    }
}

function cancelCreateBoardForm() {
    const form = document.getElementById('createBoardForm');
    const button = form.previousElementSibling;
    const nameInput = document.getElementById('newBoardName');
    const descInput = document.getElementById('newBoardDesc');
    
    // –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
    form.classList.remove('show');
    button.classList.remove('active');
    
    // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
    if (nameInput) nameInput.value = '';
    if (descInput) descInput.value = '';
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
function toggleNoteForm(category) {
    const form = document.getElementById(`${category}NoteForm`);
    const button = form.previousElementSibling; // –∫–Ω–æ–ø–∫–∞ "+–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
    
    if (form.classList.contains('show')) {
        // –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
        form.classList.remove('show');
        button.classList.remove('active');
    } else {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º—ã —Å–Ω–∞—á–∞–ª–∞
        hideAllNoteForms();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Ñ–æ—Ä–º—É
        form.classList.add('show');
        button.classList.add('active');
        
        // –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ textarea
        const textarea = document.getElementById(`${category}NoteText`);
        if (textarea) {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ
            setupAutoResize(textarea);
            textarea.focus();
        }
    }
}

function cancelNoteForm(category) {
    const form = document.getElementById(`${category}NoteForm`);
    const button = form.previousElementSibling;
    const textarea = document.getElementById(`${category}NoteText`);
    const authorInput = document.getElementById(`${category}NoteAuthor`);
    
    // –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
    form.classList.remove('show');
    button.classList.remove('active');
    
    // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
    if (textarea) textarea.value = '';
    if (authorInput) authorInput.value = '';
}

function hideAllNoteForms() {
    const categories = ['good', 'bad', 'improve'];
    categories.forEach(category => {
        const form = document.getElementById(`${category}NoteForm`);
        const button = form ? form.previousElementSibling : null;
        
        if (form && form.classList.contains('show')) {
            form.classList.remove('show');
            if (button) button.classList.remove('active');
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
function editNote(noteId) {
    console.log('üìù Inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:', noteId);
    
    // –û—Ç–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    cancelAllEditing();
    
    const noteElement = document.querySelector(`[data-note-id="${noteId}"]`);
    if (!noteElement) {
        console.error('–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', noteId);
        return;
    }
    
    // –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –≤ –¥–∞–Ω–Ω—ã—Ö
    const note = currentBoard.notes.find(n => n.id === noteId);
    if (!note) {
        console.error('–î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', noteId);
        return;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
    const noteTextEl = noteElement.querySelector('.note-text');
    const noteMetaEl = noteElement.querySelector('.note-meta');
    const authorSpan = noteMetaEl.querySelector('span');
    const actionsDiv = noteElement.querySelector('.note-actions');
    
    if (!noteTextEl || !authorSpan || !actionsDiv) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const originalText = note.text;
    const originalAuthor = note.author;
    
    // –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ textarea
    const textarea = document.createElement('textarea');
    textarea.id = `editText-${noteId}`;
    textarea.value = originalText;
    textarea.className = 'inline-edit-textarea';
    textarea.style.cssText = `
        width: 100%;
        min-height: 60px;
        padding: 12px 25px 20px 15px;
        border: 2px solid #007bff;
        border-radius: 4px;
        font-family: inherit;
        font-size: inherit;
        margin-bottom: 8px;
        line-height: 1.4;
    `;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    setupAutoResize(textarea);
    
    // –ó–∞–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –Ω–∞ input
    const authorInput = document.createElement('input');
    authorInput.id = `editAuthor-${noteId}`;
    authorInput.value = originalAuthor;
    authorInput.type = 'text';
    authorInput.placeholder = '–ê–≤—Ç–æ—Ä';
    authorInput.style.cssText = `
        border: 1px solid #007bff; 
        border-radius: 3px; 
        padding: 2px 6px; 
        font-size: 12px; 
        width: 120px;
        margin-right: 10px;
    `;
    
    // –ó–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    noteTextEl.replaceWith(textarea);
    authorSpan.replaceWith(authorInput);
    
    // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    const saveBtn = document.createElement('button');
    saveBtn.textContent = '‚úì';
    saveBtn.title = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
    saveBtn.className = 'edit-save-btn';
    saveBtn.style.cssText = 'background:rgb(141, 210, 157); color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; margin-right: 4px; font-size: 12px;';
    saveBtn.onclick = () => saveInlineEdit(noteId, originalText, originalAuthor);
    
    const cancelBtn = document.createElement('button');
    cancelBtn.textContent = '‚úó';
    cancelBtn.title = '–û—Ç–º–µ–Ω–∞';
    cancelBtn.className = 'edit-cancel-btn';
    cancelBtn.style.cssText = 'background: #f5a3bd; color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; margin-right: 4px; font-size: 12px;';
    cancelBtn.onclick = () => cancelInlineEdit(noteId, originalText, originalAuthor);

    const deleteBtn = document.createElement('button');
    deleteBtn.textContent = 'üóëÔ∏è';
    deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É';
    deleteBtn.className = 'delete-btn';
    deleteBtn.style.cssText = 'background: #f5a3bd; color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; font-size: 12px; display: inline-block;';
    deleteBtn.onclick = () => deleteNote(noteId);

    // –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editButtonsContainer = document.createElement('div');
    editButtonsContainer.className = 'edit-buttons-container';
    editButtonsContainer.style.cssText = 'display: flex; gap: 4px; align-items: center; margin-top: 8px;';
    
    // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    editButtonsContainer.appendChild(saveBtn);
    editButtonsContainer.appendChild(cancelBtn);
    editButtonsContainer.appendChild(deleteBtn);

    // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–æ–≤, –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const editBtn = actionsDiv.querySelector('.edit-btn');
    const voteBtn = actionsDiv.querySelector('.vote-btn');
    
    if (editBtn) {
        editBtn.style.display = 'none';
    }
    
    if (voteBtn) {
        voteBtn.style.display = 'none';
    }
    
    actionsDiv.appendChild(editButtonsContainer);
    
    // –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é
    noteElement.classList.add('editing');
    noteElement.dataset.editing = 'true';
    
    // –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ–∫—É—Å
    textarea.focus();
    textarea.setSelectionRange(textarea.value.length, textarea.value.length);
}

function cancelInlineEdit(noteId, originalText, originalAuthor) {
    console.log('‚ùå –û—Ç–º–µ–Ω–∞ inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', noteId);
    
    const noteElement = document.querySelector(`[data-note-id="${noteId}"]`);
    if (!noteElement) return;
    
    // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const textarea = noteElement.querySelector(`#editText-${noteId}`);
    const authorInput = noteElement.querySelector(`#editAuthor-${noteId}`);
    const saveBtn = noteElement.querySelector('.edit-save-btn');
    const cancelBtn = noteElement.querySelector('.edit-cancel-btn');
    const editBtn = noteElement.querySelector('.edit-btn');
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (textarea) {
        const noteTextDiv = document.createElement('div');
        noteTextDiv.className = 'note-text';
        noteTextDiv.textContent = originalText;
        textarea.replaceWith(noteTextDiv);
    }
    
    if (authorInput) {
        const authorSpan = document.createElement('span');
        const createdAt = noteElement.dataset.createdAt || new Date().toISOString();
        authorSpan.innerHTML = `${originalAuthor} ‚Ä¢ ${formatDate(createdAt)}`;
        authorInput.replaceWith(authorSpan);
    }
    
    // –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–∞–π–∫–æ–≤
    const editButtonsContainer = noteElement.querySelector('.edit-buttons-container');
    const voteBtn = noteElement.querySelector('.vote-btn');
    
    if (editButtonsContainer) editButtonsContainer.remove();
    if (editBtn) editBtn.style.display = '';
    if (voteBtn) voteBtn.style.display = '';
    
    // –£–±—Ä–∞—Ç—å –ø–æ–º–µ—Ç–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    noteElement.classList.remove('editing');
    delete noteElement.dataset.editing;
}

function cancelAllEditing() {
    const editingNotes = document.querySelectorAll('.note[data-editing="true"]');
    editingNotes.forEach(noteElement => {
        const noteId = noteElement.dataset.noteId;
        const note = currentBoard?.notes?.find(n => n.id === noteId);
        if (note) {
            cancelInlineEdit(noteId, note.text, note.author);
        }
    });
}

async function saveInlineEdit(noteId, originalText, originalAuthor) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–º–µ—Ç–∫–∏:', noteId);
    
    if (!currentBoard) {
        showError('–î–æ—Å–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
        return;
    }
    
    const textarea = document.getElementById(`editText-${noteId}`);
    const authorInput = document.getElementById(`editAuthor-${noteId}`);
    
    if (!textarea || !authorInput) {
        showError('–≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    const newText = textarea.value.trim();
    const newAuthor = authorInput.value.trim() || 'Anonymous';
    
    if (!newText) {
        showError('–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
    }
    
    try {
        const response = await fetch(`/api/boards/${currentBoard.id}/notes/${noteId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                text: newText,
                author: newAuthor
            })
        });
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.detail || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
        }
        
        console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
        // –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cancelInlineEdit(noteId, newText, newAuthor);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å–∫—É
        await loadBoard(currentBoard.id);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: ' + error.message);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (currentBoard) {
        loadBoard(currentBoard.id);
    }
}, 30000);
